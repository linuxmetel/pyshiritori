from pykakasi import kakasi
import random

"""
しりとりのライブラリです。漢字→ひらがなに pykakasi を利用しています、漢字を正しく読めない場合がありますがそのへんはご了承ください

(例)
>>> import pyshiritori
>>> shiritori = pyshiritori.session(pyshiritori.Dict)
>>> shiritori("りんご")
(True, '小泉純一郎')
>>> shiritori("牛")
(True, '新入生歓迎会')
>>> shiritori("イカ")
(True, '関東')
>>> shiritori("梅")
(True, '眼')
>>> shiritori("メダカ")
(True, '南瓜')
>>> shiritori("夜間")
(False, 0)

Dict がしりとり用の単語集として付属していますが、実際に Bot の一部として同じサーバーにいる方に使っていただいてみて集めたものの一部であり、不完全な部分などが多いかと思います。そのため実際に自分で作成することをおすすめいたします。
"""

kakasi_ = kakasi()
kakasi_.setMode('J', 'H')  # J(Kanji) to H(Hiragana)
kakasi_.setMode('H', 'H') # H(Hiragana) to None(noconversion)
kakasi_.setMode('K', 'H') # K(Katakana) to a(Hiragana)

conv = kakasi_.getConverter()

Dict = {'あ': {'あんこ', 'アメリカ', 'アマゾン川', '阿寒湖', 'アルメニア', '青虫'}, 'い': {'芋', 'イカスミ', 'イノシシ', 'いちじく', '岩', '石', 'イギリス', '椅子', 'イカ', '稲', 'いくら', '医科', '息', 'インコ', '以外', '囲碁', '異名', 'いか', '板', '意味', 'いちご', 'イスタンブール', 'イチジク', 'イットリウム', 'インド', 'いにしえ', '居酒屋', 'いるか', '以後'}, 'う': {'海', '臼', '羽毛', '打ち合わせ', 'うめぼし', 'ウミウシ', '羽化', 'ウシ', 'うずら', 'うし', '歌', '牛', '宇治', 'うずらの卵', '瓜', 'うな重'}, 'え': {'塩化', 'エラー', '煙突', '笑み',}, 'お': {'オオカマキリ', '王', 'オス'}, 'か': {'画鋲', '括弧列', '学校', '括弧', '神様', 'かぼちゃ', 'カナダ', '害悪', 'カリウム', 'からす', 'カワウソ', '関東', '歌詞', '亀', 'かす', '観光', 'かご', '過去', '籠', 'カス', '滑走路', '関西', '科学', 'カンボジア', '雷', '会社', 'カタカナ', 'カモメ', '関東ローム層', 'かもめ', '型', 'カレー', 'ガス', '顔', 'カラス', '株式会社', '南瓜'}, 'き': {'幾何学', '危機一髪', '切子', '貴公子', '競プロ', '幾何', 'キック', 'ギター', '金魚', '北', '気孔', '業者', '機械', '木構造', '協定', '今日', '黄身', 'キリギリス', '金塊'}, 'く': {'栗', 'グミ', '苦悩', '串刺し', '草', '空海', '熊', 'くんせい', '茎', '九九', '国', '苦笑', 'クマノミ', '海月', '公家', 'クロール', 'くす玉', 'クイズ', '苦労', 'クック諸島', 'くり', '黒', '蔵', 'クズ', 'クリスマス', 'クイナ', '群馬', '鯨', '苦肉', 'クロアチア', 'グラス', 'クール', '勲章', 'クレジットカード', '車', '燻製'}, 'け': {'喧嘩', 'ケーキ', '警察', '健康', '言動'}, 'こ': {'胡麻団子', '国歌', '小手', 'こま', '子供', '購入', '交渉', '鉱石', 'コオロギ', '校歌', '極楽浄土', '語弊', '極楽', '交互', 'コバルト', '考察', '古歌', 'コート', 'こんにゃく', '小泉純一郎', 'コーヒー', '骨髄', 'ごみ箱', '誤差', '構造', '粉', '紺色', 'ゴミ', 'コバンザメ', 'ゴッホ', 'コーラ', 'こばると', 'コスタリカ', '近藤', '功労', 'ゴリラ'}, 'さ': {'最古', 'サイズ', '刺し身', 'サッカーボール', '猿'}, 'し': {'システム', 'シンガポール', '知床', '賞味', '歯科', '新入生歓迎会', '舌', '死', '私立', 'しおむすび', '振動', '下', 'シマウマ', 'ショウリョウバッタ' 'しりとり', '昇華', '聖徳太子', 'シンポジウム', '司会', '辛抱'}, 'す': {'スイス', 'ズッキーニ', 'スズムシ', '西瓜', '鈴木', 'スメル', '砂', 'するめ', 'スカイツリー', 'すいか', 'すり', 'スロー', 'スカンジウム', 'スルメ', 'スケジュール', 'スカ', 'スイッチ', '数学', '雀', '推古天皇', 'スリ', 'スコップ'}, 'せ': {'石膏', 'セントビンセント及びグレナディーン諸島'}, 'そ': {'卒園式', '卒業式', '底', 'ぞい', 'そんし', 'そり'}, 'た': {'ターメリック', '探索', '単語', '太陽', 'たらこ', '高橋', 'だんご', 'ダンゴムシ', 'ダルセーニョ', 'たらこスパゲッティ', 'ダックスフンド', '縦', 'たらこパスタ', '焚き火', 'タバスコ'}, 'ち': {'チョコレート', '塵', '地理', '地下牢', 'ちょくだい', '魑魅魍魎', '地図'}, 'つ': {'土', '燕', 'つまみ', 'ツナ', '積み木'}, 'て': {'鉄火巻き', '天々座理世'}, 'と': {'頭部', 'ドア', 'とんぼ', 'トレー', '動的計画法', '刺', '富', 'トマト', 'ドット', 'トリウム', '淘汰', '鳥', 'ドミニカ', 'トング', 'トロント', 'トロフィー', '虎', '解く', 'トンガ', 'トール'}, 'な': {'なすがすきなす', '内部構造', '仲間', 'ナス', '南無阿弥陀仏', '奈良', '苗', 'なまこ', '奈津恵', '鉈', '難易度'}, 'に': {'にんじん畑', '二分探索'}, 'ぬ': {'ぬりかべ'}, 'ね': {'ネコ', '猫', '粘土', 'ねんど', 'ネットワーク', '鼠', 'ネズミ', '年度'}, 'の': {'ノンアルコール', '農林水産省', '脳死', '海苔', 'ノルマントン号', 'のり', '野兎', 'のこのこ', '野良猫', 'ノード', 'のび太',}, 'は': {'ハム', 'バリスタ', '半分全列挙', 'パール', 'バトル', 'バリュー',}, 'ひ': {'ビッグ', '卑弥呼', '飛行機', 'ひまわり', '雹', 'ヒラメ', 'ビーツ', 'ビンタ', 'ビー玉'}, 'ふ': {'不明', '不思議の国', 'フラグ', 'ブルック', '冬', 'ぷらレール', 'フッ素', 'ブッタ', '不思議の国のアリス', '夫婦', '鰤', '部下', 'フランス'}, 'へ': {'平家物語'}, 'ほ': {'僕', 'ほうとう', 'ボーリウム', '北海道', '鉾', 'ボカロ', 'ホットココア', 'ボット', 'ボスニアヘルツェゴビナ'}, 'ま': {'マンボウ', 'マージソート', 'マカロニ', 'マイクロソフト', 'マーク', 'マクロ', 'マレーシア'}, 'み': {'ミーム', '帝', '明朝体', 'ミミズク', '未定義', 'ミンミンゼミ', '皆', '魅了', 'ミス', '三日月', 'みみずく', '耳', 'ミント', 'ミジンコ', '水'}, 'む': {'無効', '無味', '昔', '村', 'ムカデ', '無', 'ムスカ', '無垢', '息子', '無差別', '群れ'}, 'め': {'メス', 'メダカ', 'メモリ', '目', '名言集', 'メバル', '芽', 'めんこ', 'めんだこ', 'メンソール', '眼'}, 'も': {'文字列', 'ももにく', 'もどかしい', 'もずく', '桃'}, 'や': {'ヤフー', '矢', 'ヤルタ', '闇', '野菜', '野菜ジュース', '焼き芋'}, 'ゆ': {'ユーロ', '百合', 'ユートピア', '指', '雪', '湯'}, 'よ': {'妖怪', 'ヨーロッパ', '夜', '八日', '酔う', '要旨', '呼び鈴', 'ヨーダ', '曜日', '要求'}, 'ら': {'雷鳴', '乱闘', 'ライネル', 'ランデブー', 'ラッコ', 'らっこ', '落花生', 'ラー油', 'ラジオ体操', 'ライト', 'ラッパ', 'ライム', 'ランニング', 'ラップ', '楽', 'ラジウム', 'らっぱ', 'ラスベガス', '雷鳴八卦', 'ランドセル'}, 'り': {'リール', 'リンゴ', '理想郷', '莉', 'リンク', '理科', '陸', 'リクガメ', 'リコーダー', 'リップ', 'りんご', '緑茶', '理系', 'りんごジュース', '理数', '理由', 'リリース', 'リス', 'リトアニア', '利他的', '利己', '利益', '利己的', 'リスク', 'リビング', '利子', 'リミットブレイク', '量子力学', 'リミックス'}, 'る': {'ルアンダ', 'ルワンダ', 'ルール', 'ルビー', '留守番電話', 'ルーズベルト', '瑠璃瓦', 'ルーレット', 'ルービックキューブ','留守', 'ルーマニア', 'ルーター', 'ルイージ', '瑠璃色', 'ルパン三世', 'ルンバ', 'ルーク'}, 'れ': {'レール', '礼儀', '練習', 'レッサーパンダ'}, 'ろ': {'ロボット', 'ロシア', 'ろうそく', 'ローマ', '録画', 'ロバ', 'ろ紙', 'ロシアンルーレット', 'ロブスター', 'ロース', 'ろ過'}, 'わ': {'和歌山', '和解', 'ワムシ', '輪投げ',}, 'ん': set()}


hiragana = {'ぁ': 'あ', 'あ': 'あ', 'ぃ': 'い', 'い': 'い', 'ぅ': 'う', 'う': 'う', 'ぇ': 'え', 'え': 'え', 'ぉ': 'お', 'お': 'お', 'か': 'か', 'が': 'か', 'き': 'き', 'ぎ': 'き', 'く': 'く', 'ぐ': 'く', 'け': 'け', 'げ': 'け', 'こ': 'こ', 'ご': 'こ', 'さ': 'さ', 'ざ': 'さ', 'し': 'し', 'じ': 'し', 'す': 'す', 'ず': 'す', 'せ': 'せ', 'ぜ': 'せ', 'そ': 'そ', 'ぞ': 'そ', 'た': 'た', 'だ': 'た', 'ち': 'ち', 'ぢ': 'ち', 'っ': 'つ', 'つ': 'つ', 'づ': 'つ', 'て': 'て', 'で': 'て', 'と': 'と', 'ど': 'と', 'な': 'な', 'に': 'に', 'ぬ': 'ぬ', 'ね': 'ね', 'の': 'の', 'は': 'は', 'ば': 'は', 'ぱ': 'は', 'ひ': 'ひ', 'び': 'ひ', 'ぴ': 'ひ', 'ふ': 'ふ', 'ぶ': 'ふ', 'ぷ': 'ふ', 'へ': 'へ', 'べ': 'へ', 'ぺ': 'へ', 'ほ': 'ほ', 'ぼ': 'ほ', 'ぽ': 'ほ', 'ま': 'ま', 'み': 'み', 'む': 'む', 'め': 'め', 'も': 'も', 'ゃ': 'や', 'や': 'や', 'ゅ': 'ゆ', 'ゆ': 'ゆ', 'ょ': 'よ', 'よ': 'よ', 'ら': 'ら', 'り': 'り', 'る': 'る', 'れ': 'れ', 'ろ': 'ろ', 'ゎ': 'わ', 'わ': 'わ',  'ん': 'ん', 'ゔ': 'う'}

def set_to_dict(Set):
  """
  単語を集めた set を session() で使える形式の dict に変えます
  """
  Dict = {}
  for i in hiragana:
    Dict[hiragana[i]] = set()

  for i in Set:
    if saisyo(i) != None:
      Dict[saisyo(i)].add(i)

  return Dict

def hantei(Str):
  """
  その文字がひらがなかを判定し、ひらがなであれば清音の大きい文字で返します
  ひらがなでなければ、None を返します。
  """
  if Str in hiragana:
    return hiragana[Str]
  else:
    return None

#　※判定する文字列を mess として書くのでご注意くださいませ
def saisyo(mess):
  """
  saisyo(mess)
   messの最後の音を清音の大きい文字で返します
  """
  new_mess = conv.do(mess)
  for c in new_mess:
    if c in hiragana:
      return hantei(c)
  return None

def saigo(mess):
  """
  saigo(mess)
   messの最初の音を清音の大きい文字で返します。
  """
  new_mess = conv.do(mess)
  for c in reversed(new_mess):
    if c in hiragana:
      return hantei(c)
  return None

def session(Dict):
  """
  session(Dict)
  {最初の音を表すひらがなの清音にしたもの (拗音なども「よ」など大きい文字に直したもの) : {単語のset}} を Dict として取ります。Dict はひらがなの大きい清音すべてを含んでいる必要があります。 set_to_dict() を使用して作成することをおすすめします。
  しりとりのセッションの関数を返します。
  しりとりのセッションの関数
    引数
    ・しりとりでのあなたのターンの言葉をかえします
    返り値
    ・(True, ret_str) ret_str がしりとりへの答えです
    ・(False, 0) 「ん」で終わる言葉が送信されました、あなたの負けです (?)
    ・(False, 1) すでに出た言葉がしりとりに使われました
    ・(False, 2) しりとりにつかうのに適切ではない言葉 (記号のみなど) が送られました
    ・(False, 3) しりとりになっていません (前の言葉の最後と送られた言葉の最初の音が一致しません)
    ・(False, 4) 言葉がネタ切れです。私の負けです (?)
  一番最初は「しりとり」なので「り」で始まる言葉を送ってください。
  """
  session_already = set()
  session_dict = {}
  for i in Dict:
    session_dict[i] = Dict[i].copy()
    tmp_mess = "しりとり"
    session_already.add("しりとり")
    if 'し' in session_dict:
      session_dict[saisyo("しりとり")].discard("しりとり")

  def tmp (mess):
    nonlocal tmp_mess

    if saisyo(mess) != saigo(tmp_mess) and tmp_mess != "":
      return (False, 3)

    if saisyo(mess) == None or saigo(mess) == None:
      return (False, 2)

    if mess in session_already:
      return (False, 1)

    if saigo(mess) == "ん":
      return (False, 0, )



    session_already.add(mess)

    session_dict[saisyo(mess)].discard(mess)
    if not len(session_dict[saigo(mess)]):
      return (False, 4)

    ret_str = random.sample(session_dict[saigo(mess)], 1)[0]
    session_already.add(ret_str)
    session_dict[saisyo(ret_str)].remove(ret_str)
    tmp_mess = ret_str
    return (True, ret_str)

  return tmp
